function [ flag ] = safetyMonitor( in1, in2 )
% in1, in2: Data Structure that stores information about the aircraft
%       (x, y): Current Location of the aircraft
%       (xd, yd): Destination of aircraft
%       theta: Current direction of motion
%       m: Message from neighbouring aircraft 
%           - empty if aircraft not in neighbourhood
%           - (x, y, xd, yd, theta) of other aircraft if non-empty
%
% flag: true if the safety is voilated and false otherwise.

% Check if the two aircrafts can communicate at the beginning of this step.
% if((in1.x-2<=in2.x<=in1.x+2)&&(in1.y-2<=in2.y<=in1.y+2))
if(abs(in1.x - in2.x) <= 2 && abs(in1.y - in2.y) <= 2 )    
    in1.m = in2;
    in2.m = in1;
else
    in1.m = [];
    in2.m = [];
    flag = true;
    return
end

% Calculate the position of in1 at the end of this step.
if(in1.theta == 0)
    in1_x_next = in1.x + 1;
    in1_y_next = in1.y;
elseif(in1.theta == 90)
    in1_x_next = in1.x;
    in1_y_next = in1.y + 1;
elseif(in1.theta == -90 || in1.theta == 270)
    in1_x_next = in1.x;
    in1_y_next = in1.y - 1;
else
    in1_x_next = in1.x - 1;
    in1_y_next = in1.y;
end

% Calculate the position of in2 at the end of this step.
if(in2.theta == 0)
    in2_x_next = in2.x + 1;
    in2_y_next = in2.y;
elseif(in2.theta == 90)
    in2_x_next = in2.x;
    in2_y_next = in2.y + 1;
elseif(in2.theta == -90 || in2.theta == 270)
    in2_x_next = in2.x;
    in2_y_next = in2.y - 1;
else
    in2_x_next = in2.x - 1;
    in2_y_next = in2.y;
end

% Check if the safety is violated.
if((in1_x_next==in2.x)&&(in1_y_next==in2.y)&&(in2_x_next==in1.x)...
        &&(in2_y_next==in1.y)) % collide.
    flag = false;
else
    if(abs(in1_x_next - in2_x_next)+abs(in1_y_next - in2_y_next)>=0.5)
        flag = true;
    else
        flag = false;
    end
end

end